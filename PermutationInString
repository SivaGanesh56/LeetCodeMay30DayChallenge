/*

@Author: Siva Ganesh

Problem Link ==>  https://leetcode.com/explore/challenge/card/may-leetcoding-challenge/536/week-3-may-15th-may-21st/3333/

Description:  Given two strings s1 and s2, write a function to return true if s2 contains the permutation of s1. In other words, one of the first string's permutations is the substring of the second string.

Sample Cases:
          1. Input: s1 = "ab" s2 = "eidbaooo"
             Output: True
          2. Input:s1= "ab" s2 = "eidboaoo"
             Output: False
         
Apporach: sliding window technique

*/

public class Solution {
    public boolean checkInclusion(String s1, String s2) {
        int m = s1.length();
        int n = s2.length();
        if(m>n) return false;
        int[] a = new int[26];
        for(int i=0;i<m;i++){
            ++a[s1.charAt(i)-97];
            --a[s2.charAt(i)-97];
        }
        if(isMatched(a)) return true;
        for(int i=m;i<n;i++){
            --a[s2.charAt(i)-97];
            ++a[s2.charAt(i-m)-97];
            if(isMatched(a)) return true;
        }
        return false;
    }
    
    //Every Element in Array must be zero in order to match
    private boolean isMatched(int[] a){
        for(int i=0;i<26;i++){
            if(a[i]!=0) return false;
        }
        return true;
    }   
}
