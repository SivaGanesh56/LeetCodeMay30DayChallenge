/*

@Author: Siva Ganesh

Problem Link  ===> https://leetcode.com/explore/challenge/card/may-leetcoding-challenge/535/week-2-may-8th-may-14th/3329/

Description: Implement a trie with insert, search, and startsWith methods.

Sample Cases:
            Trie trie = new Trie();
            trie.insert("apple");
            trie.search("apple");   // returns true
            trie.search("app");     // returns false
            trie.startsWith("app"); // returns true
            trie.insert("app");   
            trie.search("app");     // returns true
            

Apporach: Tree Based Implementation

*/

import java.util.*;


public class Trie {
	
	private class TrieNode{
		Map<Character,TrieNode> children;
		boolean endOfWord;
		public TrieNode() {
			children = new HashMap<Character, Trie.TrieNode>();
			endOfWord = false;
		}
	}
	
	private final TrieNode root;

	public Trie() {
		root = new TrieNode();
	}
	
	public void insert(String word) {
		TrieNode curr = root;
		for(Character ch : word.toCharArray()) {
			TrieNode node = curr.children.get(ch);
			if(node==null) {
				node = new TrieNode();
				curr.children.put(ch,node);
			}
			curr = node;
		}
		curr.endOfWord = true;
	}
	
	public boolean search(String word) {
		TrieNode curr = root;
		for(Character ch : word.toCharArray()) {
			TrieNode node = curr.children.get(ch);
			if(node==null) {
				return false;
			}
			curr = node;
		}
		return curr.endOfWord;
	}
	
	public boolean startsWith(String word) {
		TrieNode curr = root;
		for(Character ch : word.toCharArray()) {
			TrieNode node = curr.children.get(ch);
			if(node==null) {
				return false;
			}
			curr = node;
		}
		return true;
	}
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */


