/*

@Author: Siva Ganesh

Problem Link ==>  https://leetcode.com/explore/challenge/card/may-leetcoding-challenge/536/week-3-may-15th-may-21st/3336/

Description:  Given a m * n matrix of ones and zeros, return how many square submatrices have all ones.

Sample Cases:
    1. Input: matrix =
                  [
                    [0,1,1,1],
                    [1,1,1,1],
                    [0,1,1,1]
                  ]
       Output: 15
       
Apporach: DP 

*/

class Solution {
    public int countSquares(int[][] A) {
        int res = 0;
        for (int i = 0; i < A.length; ++i) {
            for (int j = 0; j < A[0].length; ++j) {
                if (A[i][j] > 0 && i > 0 && j > 0) {
                    A[i][j] = Math.min(A[i - 1][j - 1], Math.min(A[i - 1][j], A[i][j - 1])) + 1;
                }
                res += A[i][j];
            }
        }
        return res;
    }
}
